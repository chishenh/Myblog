<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shiny on Chi-Hsuan&#39;s Blog</title>
    <link>/categories/shiny/</link>
    <description>Recent content in Shiny on Chi-Hsuan&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Wed, 14 Nov 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/categories/shiny/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Shiny 動態選項</title>
      <link>/post/shiny-dynamic-ui/shiny-dynamic-ui/</link>
      <pubDate>Wed, 14 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/shiny-dynamic-ui/shiny-dynamic-ui/</guid>
      <description>


&lt;p&gt;對不同筆資料進行同一種分析時，分析變數的名稱可能會因資料而異，例如這一筆資料的時間變數叫做 Time，另外一筆可能叫 Date，每次分析都要去改變數的名字會有點麻煩。&lt;/p&gt;
&lt;p&gt;使用 Shiny 的 &lt;code&gt;reactiveUI&lt;/code&gt; 函數可以從讀進來的資料自動產生選項選單，從裡面點選要用來分析的變數，基本的寫法如下：&lt;/p&gt;
&lt;div id=&#34;ui.r&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;ui.R&lt;/h5&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;uiOutput(&amp;quot;Select&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;server.r&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;server.R&lt;/h5&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;output$Select=reactiveUI(function(){
       selectizeInput(&amp;#39;variables&amp;#39;,multiple=T,names(d))
       })&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;假設讀取的資料框架 (data.frame) 為 &lt;code&gt;d&lt;/code&gt;，則 &lt;code&gt;names(d)&lt;/code&gt; 會列出所有變數名稱供選擇，選取的變數名稱會存在 &lt;code&gt;input$variables&lt;/code&gt; 供後續使用。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;進階使用&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;有時候需要處理比較複雜的狀況，針對選到的變數希望進行不同的處理，例如畫不同的圖型，或是進行不同的變數轉換…等。這時候就需要能自動產生各自的選單，進行個別的選取動作。 Shiny 的寫法如下：&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;在 ui 中加入&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;uiOutput(&amp;quot;Select.trans&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用來存放所有被選取的變數產生的選單&lt;/p&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;在 server 中分成幾個部分：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;select.var&lt;/code&gt; 為 &lt;code&gt;reactive&lt;/code&gt; 函數，紀錄選取變數 &lt;code&gt;input$variables&lt;/code&gt; 的個數。&lt;/li&gt;
&lt;li&gt;對所有選取的變數，各自產生自己的選單，會傳到 ui 的 &lt;code&gt;Select.trans&lt;/code&gt; 中。&lt;/li&gt;
&lt;li&gt;產生每一個變數各自對應的選單內容，這邊的例子是變數轉換：&lt;code&gt;as.numeric&lt;/code&gt; 轉成數值，&lt;code&gt;as.factor&lt;/code&gt; 轉成類別因子，&lt;code&gt;as.character&lt;/code&gt; 轉成文字，&lt;code&gt;log&lt;/code&gt; 取自然對數，&lt;code&gt;inverse&lt;/code&gt; 取倒數，&lt;code&gt;sqrt&lt;/code&gt; 取平方根。&lt;/li&gt;
&lt;li&gt;各自選取之後產生的新變數存放在 &lt;code&gt;input$trans_變數名&lt;/code&gt; 中。例如我們對變數 &lt;code&gt;age&lt;/code&gt; 選擇 &lt;code&gt;sqrt&lt;/code&gt; 取平方根的轉換，後續則用 &lt;code&gt;input$trans_age&lt;/code&gt; 來呼叫轉換後的新變數。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;select.var=reactive({
       n_select=length(input$variables)
       return(list(&amp;quot;n&amp;quot;=n_select))
       })

output$Select.trans=renderUI({
       select_output_list &amp;lt;- lapply(1:select.var()$n, function(i) {
       new.name&amp;lt;-paste0(&amp;quot;trans_&amp;quot;, i)
       list(uiOutput(new.name))
       })
       do.call(tagList, select_output_list)
       })

observe({
       lapply(1:select.var()$n, function(i){
                output[[paste0(&amp;quot;trans_&amp;quot;, i)]] &amp;lt;-reactiveUI(function(){
                selectizeInput(
                paste0(&amp;quot;trans_&amp;quot;,input$variables[i]),
                choices=c(&amp;quot;as.numeric&amp;quot;=1,&amp;quot;as.factor&amp;quot;=2,&amp;quot;as.character&amp;quot;=3,
                          &amp;quot;log&amp;quot;=4,&amp;quot;inverse&amp;quot;=5,&amp;quot;sqrt&amp;quot;=6),selected=1)
                })
       })
       })&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;同樣的架構可以運用在畫圖、製表等，讓你的 Shiny 應用非常具有彈性。&lt;/p&gt;
&lt;/div&gt;
</description>
      
            <category>R</category>
      
            <category>Shiny</category>
      
      
            <category>R</category>
      
            <category>Shiny</category>
      
    </item>
    
  </channel>
</rss>